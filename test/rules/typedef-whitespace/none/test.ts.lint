var noPreceedingSpaceObjectLiteralWithPropertyGetter = {
    _Prop: "some property",

    get Prop(): string {
        return this._Prop;
    }
};

var withPreceedingSpaceObjectLiteralWithPropertyGetter = {
    _Prop: "some property",

    get Prop() : string {
        return this._Prop;
    }
};

interface NoPreceedingSpaceInterface {
    Prop: string;
}

interface WithPreceedingSpaceInterface {
    Prop : string;
}

var noPreceedingSpacesFn = function (a: number, b: number): number {
    var c: number = a + b;
    var d: number = a - b;

    try {
        return c / d;
    } catch (ex: Exception) {
        console.log(ex);
    }
};

var withPreceedingSpacesFn = function (a : number, b : number) : number {
    var c : number = a + b;
    var d : number = a - b;

    try {
        return c / d;
    } catch (ex : Exception) {
        console.log(ex);
    }
};

var withPreceedingSpacesCallSignaturePaddedParams = function ( ) : {}

class NoPreceedingSpacesClass {
    [index: number]: string

    Prop: string = "some property";

    public get name(): string {
        return "some name";
    }

    public set name(a: string): void {}

    public shemp(
        a: number,
        b: number
    ): void {}
}

class WithPreceedingSpacesClass {
    [index : number] : string

    Prop : string = "some property";

    public get name() : string {
        return "some name";
    }

    public set name(a : string) : void {}

    public shemp(
        a : number,
        b : number
    ) : void {}
}
