var noPreceedingSpaceObjectLiteralWithPropertyGetter = {
    _Prop: "some property",

    get Prop(): string {
              ~          [expected space in call-signature]
        return this._Prop;
    }
};

var withPreceedingSpaceObjectLiteralWithPropertyGetter = {
    _Prop: "some property",

    get Prop() : string {
        return this._Prop;
    }
};

interface NoPreceedingSpaceInterface {
    Prop: string;
        ~         [expected space in property-declaration]
}

interface WithPreceedingSpaceInterface {
    Prop : string;
}

var noPreceedingSpacesFn = function (a: number, b: number): number {
                                      ~                              [expected space in parameter]
                                                 ~                   [expected space in parameter]
                                                          ~          [expected space in call-signature]
    var c: number = a + b;
         ~                 [expected space in variable-declaration]
    var d: number = a - b;
         ~                 [expected space in variable-declaration]

    try {
        return c / d;
    } catch (ex: Exception) {
               ~              [expected space in variable-declaration]
        console.log(ex);
    }
};

var withPreceedingSpacesFn = function (a : number, b : number) : number {
    var c : number = a + b;
    var d : number = a - b;

    try {
        return c / d;
    } catch (ex : Exception) {
        console.log(ex);
    }
};

class NoPreceedingSpacesClass {
    [index: number]: string
          ~                 [expected space in index-signature]
          ~                 [expected space in parameter]

    Prop: string = "some property";
        ~                           [expected space in property-declaration]

    public get name(): string {
                     ~          [expected space in call-signature]
        return "some name";
    }
}

class WithPreceedingSpacesClass {
    [index : number] : string

    Prop : string = "some property";

    public get name() : string {
        return "some name";
    }
}
